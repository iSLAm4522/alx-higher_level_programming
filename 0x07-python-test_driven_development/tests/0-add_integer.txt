The ``0-add_integer`` module
============================

Using ``add_integer``
-------------------

Import function from module:
    >>> add_integer = __import__('0-add_integer').add_integer

Test basic addition:
    >>> add_integer(1, 2)
    3

Test negative number:
    >>> add_integer(100, -2)
    98

Test single argument (uses default b=98):
    >>> add_integer(2)
    100

Test float arguments:
    >>> add_integer(100.3, -2)
    98

Test float and integer:
    >>> add_integer(2.5, 3)
    5

Test string input for a:
    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test string input for b:
    >>> add_integer(3, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

Test None input:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test both None:
    >>> add_integer(None, None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test very large numbers:
    >>> add_integer(1500000000, 2500000000)
    4000000000

Test negative floats:
    >>> add_integer(-98.5, -102.3)
    -200

Test zero values:
    >>> add_integer(0, 0)
    0

Test infinity:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Test NaN:
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
