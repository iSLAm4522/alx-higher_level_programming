The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
-------------------

Import function from module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic matrix division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test original matrix unchanged:
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Test division by 1:
    >>> matrix_divided([[2, 4, 6], [8, 10, 12]], 1)
    [[2.0, 4.0, 6.0], [8.0, 10.0, 12.0]]

Test division by negative number:
    >>> matrix_divided([[1, 2], [3, 4]], -2)
    [[-0.5, -1.0], [-1.5, -2.0]]

Test division by float:
    >>> matrix_divided([[10, 20], [30, 40]], 2.5)
    [[4.0, 8.0], [12.0, 16.0]]

Test division by zero:
    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Test non-number divisor:
    >>> matrix_divided([[1, 2], [3, 4]], "hello")
    Traceback (most recent call last):
    TypeError: div must be a number

Test matrix with non-number elements:
    >>> matrix_divided([[1, "hello"], [3, 4]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with rows of different sizes:
    >>> matrix_divided([[1, 2, 3], [4, 5]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Test empty matrix:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    IndexError: list index out of range

Test matrix with empty rows:
    >>> matrix_divided([[]], 2)
    [[]]

Test division by infinity:
    >>> matrix_divided([[1, 2], [3, 4]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

Test division by NaN:
    >>> matrix_divided([[1, 2], [3, 4]], float('nan'))
    [[nan, nan], [nan, nan]]
